<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
using IDataSphere.Interface.<#=this.data.SwaggerGroupEnumName#>.<#=this.data.ClassNamePrefix #>;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Filters;
using Microsoft.Extensions.Localization;
using Model.Commons.Domain;
using Model.Commons.SharedData;
using Model.DTOs.<#=this.data.SwaggerGroupEnumName#>.<#=this.data.ClassNamePrefix#>;
using UtilityToolkit.Utils;
using Model.Repositotys.<#=this.data.TableGroupName#>;
using UtilityToolkit.Helpers;
namespace WebApi_Offcial.ActionFilters.<#=this.data.SwaggerGroupEnumName#>
{
    /// <summary>
    /// <#=this.data.ChinesesName #>过滤切面
    /// </summary>
    public class <#=this.data.ClassNamePrefix #>ActionFilter : IAsyncActionFilter
    {
        #region 构造函数
        private readonly I<#=this.data.ClassNamePrefix #>Dao _<#=this.data.ParameterName#>Dao;
        private readonly IStringLocalizer<UserTips> _stringLocalizer;

        public <#=this.data.ClassNamePrefix #>ActionFilter(I<#=this.data.ClassNamePrefix #>Dao <#=this.data.ParameterName#>Dao, IStringLocalizer<UserTips> stringLocalizer)
        {
            this._stringLocalizer = stringLocalizer;
            this._<#=this.data.ParameterName#>Dao = <#=this.data.ParameterName#>Dao;
        }
        #endregion

        #region 过滤切面
        /// <summary>
        /// 验证方法
        /// </summary>
        /// <param name="context"></param>
        /// <param name="next"></param>
        /// <returns></returns>
        public async Task OnActionExecutionAsync(ActionExecutingContext context, ActionExecutionDelegate next)
        {
            string actionName = context.RouteData.Values["action"].ToString().ToLower();
            Dictionary<string, object> dic = (Dictionary<string, object>)context.ActionArguments;
            ServiceResult serviceResult = null;
            switch (actionName)
            {   
                case "add<#= this.data.TableName.Split("_")[1].ToLower()#>":
                    serviceResult = await Add<#= this.data.TableName.Split("_")[1]#>Verify((Add<#= this.data.TableName.Split("_")[1]#>Input)dic["input"]);
                    break;
                case "update<#= this.data.TableName.Split("_")[1].ToLower()#>":
                    serviceResult = await Update<#= this.data.TableName.Split("_")[1]#>Verify((Update<#= this.data.TableName.Split("_")[1]#>Input)dic["input"]);
                    break;
                case "delete<#= this.data.TableName.Split("_")[1].ToLower()#>":
                    serviceResult = await Delete<#= this.data.TableName.Split("_")[1]#>Verify((IdInput)dic["input"]);
                    break;
                default:
                    serviceResult = ServiceResult.Successed();
                    break;
            }
            // 不成功则返回
            if (!serviceResult.Success)
            {
                context.Result = new JsonResult(serviceResult);
                return;
            }
            await next.Invoke();
        }
        #endregion

        #region 验证方法     
        /// <summary>
        /// 新增
        /// </summary>
        /// <returns></returns>
        private async Task<ServiceResult> Add<#= this.data.TableName.Split("_")[1]#>Verify(Add<#= this.data.TableName.Split("_")[1]#>Input input)
        {
            bool dataExisted = await _<#=this.data.ParameterName#>Dao.DataExisted(p => p.Name == input.Name);
            if (dataExisted)
            {
                return ServiceResult.IsFailure(_stringLocalizer["DataExisted"].Value);
            }
            return ServiceResult.Successed();
        }

        /// <summary>
        /// 更新
        /// </summary>
        /// <returns></returns>
        private async Task<ServiceResult> Update<#= this.data.TableName.Split("_")[1]#>Verify(Update<#= this.data.TableName.Split("_")[1]#>Input input)
        {
            bool idExisted = await _<#=this.data.ParameterName#>Dao.IdExisted(input.Id);
            if (!idExisted)
            {
                return ServiceResult.IsFailure(_stringLocalizer["DataNotExist"].Value);
            }
            bool dataExisted = await _<#=this.data.ParameterName#>Dao.DataExisted(p => p.Id != input.Id && p.Name == input.Name);
            if (dataExisted)
            {
                return ServiceResult.IsFailure(_stringLocalizer["DataExisted"].Value);
            }
            return ServiceResult.Successed();
        }

        /// <summary>
        /// 删除
        /// </summary>
        /// <returns></returns>
        private async Task<ServiceResult> Delete<#= this.data.TableName.Split("_")[1]#>Verify(IdInput input)
        {
            bool idExisted = await _<#=this.data.ParameterName#>Dao.IdExisted(input.Id);
            if (!idExisted)
            {
                return ServiceResult.IsFailure(_stringLocalizer["DataNotExist"].Value);
            }
            return ServiceResult.Successed();
        }      
        #endregion
    }
}






