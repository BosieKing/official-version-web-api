<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ output extension=".cs" #>
using System.ComponentModel.DataAnnotations;
<#if(this.data.InputType == "GetPage"){#>using Model.Commons.SharedData;
<#}#>
<#if(this.data.InputType == "GetPage"){#>namespace Model.DTOs.<#=this.data.SwaggerGroupEnumName#>.<#=this.data.ClassNamePrefix#><#}else{#>
namespace Model.DTOs.<#=this.data.SwaggerGroupEnumName#>.<#=this.data.ClassNamePrefix#> <#} #>

{<#  
     switch (this.data.InputType)
          {             
             // 如果是新增类则输出
              case "Add": 
           
    #>

    public class <#=this.data.InputType#><#=this.data.TableName.Split("_")[1]#>Input
    {<#    
           
        foreach (var item in this.data.PropertyInfos)
        {
                string propertyName = item.Name;
                string typeName = string.Empty;
                switch (item.PropertyType.Name)
                {
                    case "Int16":
                        typeName = "short";
                        break;
                    case "Int32":
                        typeName = "int";
                        break;
                    case "Int64":
                        typeName = "long";
                        break;
                    case "Double":
                        typeName = "double";
                        break;
                    case "Decimal":
                        typeName = "decimal";
                        break;
                    case "Boolean":
                        typeName = "bool";
                        break;
                    case "String":
                        typeName = "string";
                        break;
                    case "Char":
                        typeName = "char";
                        break;
                    case "DateTime":
                        typeName = "DateTime";
                        break;
                }#>               
        /// <summary>
        /// <#= propertyName #>
        /// </summary>
        [Required(ErrorMessage = "<#= propertyName #>Required")]<# if(typeName == "string" || typeName == "char") { #><#
            var customAttributes = item.GetCustomAttribute(typeof(MaxLengthAttribute)); 
            if(customAttributes != null){
            var maxLength = ((System.ComponentModel.DataAnnotations.MaxLengthAttribute)customAttributes).Length; 
         #>        
        [MaxLength(<#= maxLength#>,ErrorMessage = "<#= propertyName #>TooLong<#= maxLength#>")]<# }}#>   
        public <#= typeName #> <#= propertyName #> { get; set; }<# if(typeName == "bool"){ #> = false;<# } #>
        
        <#       
     
     }            
 #>} 

                
                  <#  break;
                case "GetPage": #>

    public class Get<#=this.data.TableName.Split("_")[1]#>PageInput : PageInput
    {<#       
        foreach (var item in this.data.PropertyInfos)
        {
                string propertyName = item.Name;
                string typeName = string.Empty;
                switch (item.PropertyType.Name)
                {
                    case "Int16":
                        typeName = "short";
                        break;
                    case "Int32":
                        typeName = "int";
                        break;
                    case "Int64":
                        typeName = "long";
                        break;
                    case "Double":
                        typeName = "double";
                        break;
                    case "Decimal":
                        typeName = "decimal";
                        break;
                    case "Boolean":
                        typeName = "bool";
                        break;
                    case "String":
                        typeName = "string";
                        break;
                    case "Char":
                        typeName = "char";
                        break;
                    case "DateTime":
                        typeName = "DateTime";
                        break;
                }
                #>

        /// <summary>
        /// <#= propertyName #>
        /// </summary><# 
        if(typeName == "string" || typeName == "char"){
            var customAttributes = item.GetCustomAttribute(typeof(MaxLengthAttribute));           
               if(customAttributes != null){
            var maxLength = ((System.ComponentModel.DataAnnotations.MaxLengthAttribute)customAttributes).Length;    
        #>

        [MaxLength(<#= maxLength#>,ErrorMessage = "<#= propertyName #>TooLong<#= maxLength#>")]<#}}
            #>

        public <#= typeName #> <#= propertyName #> { get; set; }<# 
        if(typeName == "bool"){ #> = false;<# }
        else if(typeName == "string" || typeName == "char"){ #> = String.Empty;<# }
        if(typeName == "short" || typeName == "int" || typeName == "long"){ #> = 0;<# }#>

        <#
            
            #><#

}
    #>
}
                  <#  break; 
                case "Update":#>

    public class <#=this.data.InputType#><#=this.data.TableName.Split("_")[1]#>Input :  Add<#=this.data.TableName.Split("_")[1]#>Input
    {
        /// <summary>
        /// Id
        /// </summary>
        [Required(ErrorMessage = "IdRequried")]
        public long Id { get; set; }
    }
                  <#  break; 
                default:
                   break; #>          
       <#       
     } #> 
}